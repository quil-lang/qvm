(defun nuke-debugging-and-documentation (&key (purge-xref t))
  (sb-vm::map-allocated-objects
   (lambda (obj tag size)
     (declare (ignore size))
     (cond
      ((= tag sb-vm:code-header-widetag)
       (setf (sb-kernel:%code-debug-info obj) nil)
       (loop for fun = (sb-kernel:%code-entry-points obj)
             then (sb-kernel:%simple-fun-next fun)
             while fun
             do (cond
                 ((or purge-xref
                      (stringp (sb-kernel:%simple-fun-info fun)))
                  (setf (sb-kernel:%simple-fun-info fun) nil))
                 ((consp (sb-kernel:%simple-fun-info fun))
                  (setf (sb-kernel:%simple-fun-info fun)
                        (cdr (sb-kernel:%simple-fun-info fun)))))))
      ((= tag sb-vm:instance-header-widetag)
       (cond ((typep obj 'method-combination)
              (setf (slot-value obj 'sb-pcl::%documentation) nil))
             ((typep obj 'standard-method)
              (setf (slot-value obj 'sb-pcl::%documentation) nil))
             ((typep obj 'class)
              (setf (slot-value obj 'sb-pcl::%documentation) nil))
             ((typep obj 'sb-mop:standard-slot-definition)
              (setf (slot-value obj 'sb-pcl::%documentation) nil))))
      ((and (= tag sb-vm:funcallable-instance-header-widetag)
            (typep obj 'generic-function))
       (setf (slot-value obj 'sb-pcl::%documentation) nil))))
   :dynamic)
  (sb-c::call-with-each-globaldb-name
   (lambda (name)
     (sb-int:clear-info :variable :documentation name)
     (sb-int:clear-info :type :documentation name)
     (sb-int:clear-info :type :source-location name)
     (sb-int:clear-info :typed-structure :documentation name)
     (sb-int:clear-info :setf :documentation name)
     (sb-int:clear-info :random-documentation :stuff name)
     (sb-int:clear-info :source-location :variable name)
     (sb-int:clear-info :source-location :constant name)
     (sb-int:clear-info :source-location :typed-structure name)
     (sb-int:clear-info :source-location :symbol-macro name)
     (sb-int:clear-info :source-location :vop name)
     (sb-int:clear-info :source-location :declaration name)
     (sb-int:clear-info :source-location :alien-type name)
     (sb-int:clear-info :function :inline-expansion-designator name)
     ;; package documentation, package location
     )))
